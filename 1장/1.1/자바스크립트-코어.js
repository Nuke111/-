//  '//' 뒤에 오는 내용은 주석
//  주석이란? 해당 코드의 설명

//  변수는 한 값을 위한 상징적인 이름이다.
//  변수는 아래와 같이 var 키워드로 선업할 수 있다.
var x;  //  x란 이름의 변수를 선언한다.

//  = 기호를 이용하여 변수에 값을 할당할 수 있다.
x = 0;  //  이제 변수 x의 값은 0이다.
x       //  변수 x는 변수가 가진 값 0으로 평가된다.

//  자바스크립트는 다양한 타입의 값을 지원
x = 1;              //  숫자
x = 0.01;           //  정수나 실수
x = "안녕하세요";    //  큰 따옴표로 둘러쌓인 문자열 
x = '안녕하세요';    //  작은 따옴표로 둘러쌓인 문자열
x = true;           //  참을 뜻하는 논리 값
x = false;          //  거짓을 뜻하는 논리 값
x = null;           //  ★ 값이 없음을 뜻하는 특별한 값 ★
x = undefined;      //  null과 유사함. (???)

//  객체는 이름-값 (name-value pair)의 모음이다.
//  이름은 반드시 문자열이어야 한다.
//  값 자리에는 아무 자바스크립트 값이 올 수 있다.
var book = {                //  객체는 중괄호로 열어서 시작한다.
    topic : "JavaScript",   //  topic 프로퍼티의 값은 "JavaScript"다. 
    fat : true              //  fat 프로퍼티의 값은 true다.
}                           //  닫는 중괄호로 객체 선언의 끝낸다.

// 객체의 프로퍼티는 .와 []를 사용해 접근할 수 있다.
book.topic;             // => "JavaScript"
book["fat"];            // => true
//book[fat];            // => 이렇게는 사용할 수 없다. ReferenceError: fat is not defined
//BOOK["fat"];          // => 대소분자를 구분한다.
book.author = "NUKE";   // 객체에 값을 할당하여 새 프로퍼티를 생성한다.
book.contents = {};     // {}는 프로퍼티가 없는 빈 객체다.

// 배열과 객체는 각각 원소와 프로퍼티의 값으로 배열과 객체를 가질 수 있다.
var points = [      //  배열은 대괄호로 이뤄져있다.
    {x:0, y:0},     //  각 원소는 객체이다.
    {x:1, y:1}  
];  
var data = {                //  객체에 두 프로퍼티가 있다.
    trial1:[[1,2],[3,4]],   //  각 프로퍼티의 값은 배열이고,
    trial2:[[2,3],[4,5]]    // 배열의 각 원소는 배열이다.
}

// 연산자는 값(피연산자)들을 이용해 새 값을 산출한다.
// 산술 연산자
3 + 2                       // => 5:    덧셈
3 - 2                       // => 1:    뺄셈
3 * 2                       // => 6:    곱셈
3 / 2                       // => 1.5:  나눗셈
points[1].x - points[0].x   // => 1:    피연산자 뺄셈
"3" + "2"                   // => "32"  + 연산자로 두 문자열을 이어 붙임

// 산술 연산자의 단축 표현식
var count = 0;  //  값을 정의한다.
count++;        //  값을 1 증가시킨다.
count--;        //  값을 1 감소시킨다.
count += 2;     //  값을 2 증가시킨다. count = count + 2와 같다.
count *= 3;     //  값을 3 곱한다. count = count * 3과 같다.
count           //  => 6 : 변수 이름 또한 표현식이다.

// 관계 연산자는 두 값이 같거나 다른지, 작거나 큰지를 검사한다.
// 이들 표현식은 true나 false로 산출된다.
var x = 2, y = 3;   // = 기호는 비교 검사가 아닌 할당에 주의
x==y                // => false : x와 y의 값이 같은지 비교
x!=y                // => true : x와 y의 값이 다른지 비교
x<y                 // => true : x가 y보다 작은지 비교
x<=y                // => true : x가 y보다 작거나 같은지 비교
x>y                 // => false : x가 y보다 큰지 비교
x>=y                // => false: x가 y보다 크거나 같은지 비교
"two" == "three"    // => false : 두 문자열은 서로 다르다.
"two" > "three"     // => true : two가 three보다 알파벳순으로 봤을 때 앞선지 비교 ("tw"는 "th"보다 크다.)
false == (x>y)      // => true: false는 false와 값이 같다.

// 논리 연산자는 불리언 값들은 결합하거나 반전시킬 수 있다.
//&&(AND), ||(OR), !(NOT)
console.log((x==2) && (y==3))    // => true: 두 비교식이 참이다.
console.log((x>3) || (y<3))      // => false : 두 비교식이 모두 참이 아니다.
console.log(!(x==y))             // => true : 논리 값을 반전시킨다.

function plus1(x) {	// 함수 이름은 plus1이고 매개변수로 x를 갖는다.
    return x+1;		// 매개변수로 전달받은 값에 1을 더해서 반환한다.
}					// 함수는 중괄호 {}로 둘러싸여 있다.
plus1(y)			// => 4: y가 3이면 plus1 함수는 3+1을 반환한다.

var square = function(x) {	// 여기서 함수는 값이되고, 변수 square에 할당된다.
    return x*x;				// 반환할 함수 값을 계산한다.
};							// 세미콜론을 써서 할당문의 끝을 나타낸다.

square(plus1(y))			// => 16: 하나의 표현식에서 함수 호출을 두 번 사용함.